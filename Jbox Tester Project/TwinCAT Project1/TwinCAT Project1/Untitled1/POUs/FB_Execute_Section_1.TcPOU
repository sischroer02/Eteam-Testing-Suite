<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="FB_Execute_Section_1" Id="{6ef0d8b3-28c4-4ccd-927f-c06f71faa18c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Execute_Section_1
VAR_INPUT
	StartTest : BOOL; // Tells this FB to start its checks
	SF1_Continuity : BOOL;
	SF2_Continuity : BOOL;
	SF4_Continuity : BOOL;
	SF6_Continuity : BOOL;
	SF8_Continuity : BOOL;
	S33_Up : BOOL;
	S33_Us : BOOL;
	S34_Up : BOOL;
	S34_Us : BOOL;
	S25_Up : BOOL;
	S25_Us : BOOL;
	S26_Up : BOOL;
	S26_Us : BOOL;
	S27_Up : BOOL;
	S27_Us : BOOL;
	S28_Up : BOOL;
	S28_Us : BOOL;
	S29_Up : BOOL;
	S29_Us : BOOL;
	S30_Up : BOOL;
	S30_Us : BOOL;
	Door_Switch_Closed : BOOL;
	EStop_Nominal : BOOL;
END_VAR

VAR_OUTPUT
	Done : BOOL; // Goes True when FB finishes its checks
END_VAR

VAR_IN_OUT
	// Logger : FB_TestLogger;
	Logger : FB_Add_Test_Result;
END_VAR

VAR
	state : INT; // internal step for the FB's state machine
	
	AddStep: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF StartTest THEN
    CASE state OF
        0:
            // Sub-test #1
            IF SF1_Continuity THEN
                // Pass
                Logger.TestDescription := 'AUX/Safety Pin 1 Mine Phone+ Continuity';	
				Logger.TestResult := TRUE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 1;
				END_IF
            ELSE
                // Fail
                Logger.TestDescription := 'AUX/Safety Pin 1 Mine Phone+ Continuity';
				Logger.TestResult := FALSE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 1;
				END_IF
            END_IF

		1:
            // Sub-test #2
            IF SF2_Continuity THEN
				// Pass
				Logger.TestDescription := 'AUX/Safety Pin 2 Mine Phone- Continuity';	
				Logger.TestResult := TRUE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 2;
				END_IF
            ELSE
                // Fail
                Logger.TestDescription := 'AUX/Safety Pin 2 Mine Phone- Continuity';
				Logger.TestResult := FALSE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 2;
				END_IF
            END_IF
			
			
		2:
            // Sub-test #1
            IF SF4_Continuity THEN
				// Pass
				Logger.TestDescription := 'AUX/Safety Pin 4 Fire Alarm - Continuity';	
				Logger.TestResult := TRUE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 3;
				END_IF
            ELSE
                // Fail
                Logger.TestDescription := 'AUX/Safety Pin 4 Fire Alarm - Continuity';
				Logger.TestResult := FALSE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 3;
				END_IF
            END_IF
				
			
		3:
            // Sub-test #1
            IF SF6_Continuity THEN
				// Pass
				Logger.TestDescription := 'AUX/Safety Pin 6 LEL+ Continuity';	
				Logger.TestResult := TRUE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 999;
				END_IF
            ELSE
                // Fail
                Logger.TestDescription := 'AUX/Safety Pin 6 LEL+ Continuity';
				Logger.TestResult := FALSE;
                Logger();       // Call the FB_Logger
				IF LOGGER.Test_Recorded THEN
                	state  := 999;
				END_IF
            END_IF
			
			
        999:
            // done
			Done := TRUE;
        ;

    END_CASE;
ELSE
    // if StartTest = FALSE, reset
    Done   := FALSE;
    state  := 0;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>